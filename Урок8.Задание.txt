
Задание1. Для практикума из занятия 7 продумать, где можно применить замыкания.


Я еще не до конца разобралась с замыканиями, поэтому не могу дать четкого ответа.

Думаю, в игре уместно применить классический учебный пример замыкания в JavaScript:функция-счетчик.





if (!("a" in window)) {
    var a = 1;
}
alert(a);

Ответ: Будет выведено: "undefined".

Запись "var a = 1"эквивалентна записи " window.a = 1".

Этот код воспринимается интерпретатором javascript следующим образом:

var a;
if (!("a" in window)) {
    a = 1;
}
alert(a);

Сначала объявляется переменная "a", потом а затем оператор "if" говорит: 

“Если "a" не объявлен, то запускаем "a"в значении 1”. 
Это условие никогда не может быть "true", и поэтому переменная "a" будет "undefined".

///

var b = function a(x) {
    x && a(--x);
};
alert(a);


Ответ: тут непонятно, т.к. не задано значение var "a".



///

function a(x) {
    return x * 2;
}
var a;
alert(a);

Ответ: Здесь нет инициализации, поэтому "alert" выведет исходный код функции.

///

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

Ответ: "alert" выведет значение 10. 

"a" и "arguments[2]" — это ссылка на одно и то же значение

///

function a() {
    alert(this);
}
a.call(null);

this в глобальной области указывает на window. Вызов call() у функции с параметром null 

равнозначно вызову call() без аргументов.

 А без аргументов вызываемая функция не привязана ни к какому объекту

 (или привязывается к «объекту по умолчанию» — window).